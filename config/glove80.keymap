/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&sk {
    release-after-ms = <600>;
    quick-release;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

&sl {
    release-after-ms = <600>;

    /delete-property/ quick-release;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        leftHand_hr_mt: leftHand_hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHAND_HR_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <225>;
            flavor = "balanced";
            hold-trigger-key-positions = <55 72 73 56 57 74 58 75 76 59 40 28 41 60 77 61 42 29 16 5 17 30 43 44 62 78 79 63 45 33 32 31 18 19 6 7 8 20 21 9>;
            hold-trigger-on-release;
            require-prior-idle-ms = <185>;
        };

        rightHand_hr_mt: rightHand_hr_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHAND_HR_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <225>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <185>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71>;
        };

        leftHand_hr_mt_shift: leftHand_hr_mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFTHAND_HR_MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <265>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
            hold-trigger-on-release;
            require-prior-idle-ms = <115>;
        };

        rightHand_hr_mt_shift: rightHand_hr_mt_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTHAND_HR_MT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <165>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <115>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71>;
        };

        backspace_delete: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_lshift_capsword: td_lshift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LSHIFT_CAPSWORD";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;

            tapping-term-ms = <275>;
        };

        left_up: left_up {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_UP";
            bindings = <&kp LEFT>, <&kp UP_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_down: right_down {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_DOWN";
            bindings = <&kp RIGHT>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_dance_toggle_numbers: tap_dance_toggle_numbers {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_TOGGLE_NUMBERS";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 1>, <&to 1>;

            tapping-term-ms = <275>;
        };

        th_layer_shift_capsword: th_layer_shift_capsword {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_LAYER_SHIFT_CAPSWORD";
            bindings = <&mo>, <&td_lshift_capsword>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        morph_sing_dbl_arrow: morph_sing_dbl_arrow {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SING_DBL_ARROW";
            bindings = <&single_arrow>, <&double_arrow>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        th_arrow_layer: th_arrow_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_ARROW_LAYER";
            bindings = <&mo>, <&morph_sing_dbl_arrow>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            flavor = "tap-preferred";
        };

        morph_parens: morph_parens {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_PARENS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_sqr_brackets: morph_sqr_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_SQR_BRACKETS";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        morph_curly_brackets: morph_curly_brackets {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_CURLY_BRACKETS";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_skshift_td_cword_hkpshift: tap_skshift_td_cword_hkpshift {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_SKSHIFT_TD_CWORD_HKPSHIFT";
            bindings = <&kp>, <&td_lshift_capsword>;

            #binding-cells = <2>;
            tapping-term-ms = <179>;
            flavor = "tap-preferred";
        };

        php_open_close: php_open_close {
            compatible = "zmk,behavior-mod-morph";
            label = "PHP_OPEN_CLOSE";
            bindings = <&php_open>, <&php_close>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        php_echo_close: php_echo_close {
            compatible = "zmk,behavior-mod-morph";
            label = "PHP_ECHO_CLOSE";
            bindings = <&php_echo>, <&php_close>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        tap_dance_capslock: tap_dance_capslock {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPSLOCK";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;

            tapping-term-ms = <230>;
        };

        td_morph_sqr_brkt: td_morph_sqr_brkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORPH_SQR_BRKT";
            #binding-cells = <0>;
            bindings = <&morph_sqr_brackets>, <&kp RIGHT_BRACKET>;
        };

        td_morph_curly_brkt: td_morph_curly_brkt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORPH_CURLY_BRKT";
            #binding-cells = <0>;
            bindings = <&morph_curly_brackets>, <&kp RIGHT_BRACE>;
        };

        td_morph_parens: td_morph_parens {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORPH_PARENS";
            #binding-cells = <0>;
            bindings = <&morph_parens>, <&kp RIGHT_PARENTHESIS>;
        };

        tap_bspace_hold_layer3: tap_bspace_hold_layer3 {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_BSPACE_HOLD_LAYER3";
            bindings = <&mo>, <&backspace_delete>;

            #binding-cells = <2>;
            tapping-term-ms = <155>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
        };

        th_space_layer: th_space_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TH_SPACE_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <155>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        php_open: php_open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp QMARK &kp P &kp H &kp P &kp RET>;
            label = "PHP_OPEN";
        };

        single_arrow: single_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "SINGLE_ARROW";
        };

        double_arrow: double_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "DOUBLE_ARROW";
        };

        function: function {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N &kp LPAR &kp RPAR &kp LEFT_ARROW>;
            label = "FUNCTION";
        };

        php_echo: php_echo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp QMARK &kp EQUAL &kp SPACE>;
            label = "PHP_ECHO";
        };

        php_close: php_close {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QMARK &kp GT>;
            label = "PHP_CLOSE";
        };

        template_output: template_output {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp LEFT_BRACE &kp SPACE &kp SPACE &kp RBRC &kp RBRC &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT>;
            label = "TEMPLATE_OUTPUT";
        };

        layer_mod: layer_mod {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "LAYER_MOD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp ESCAPE        &kp F2                      &kp F3                   &kp F4                      &kp F5                                                                                                              &kp F6            &kp F7                        &kp F8                            &kp F9                                &kp F10
&kp GRAVE         &kp N1                      &kp N2                   &kp N3                      &kp N4                 &kp N5                                                                               &kp N6  &kp N7            &kp N8                        &kp N9                            &kp N0                                &kp MINUS
&kp TAB           &kp Q                       &kp W                    &kp E                       &kp R                  &kp T                                                                                &kp Y   &kp U             &kp I                         &kp O                             &kp P                                 &kp BSLH
&kp LEFT_CONTROL  &leftHand_hr_mt LEFT_ALT A  &leftHand_hr_mt LCTRL S  &leftHand_hr_mt LEFT_GUI D  &kp F                  &kp G                                                                                &kp H   &kp H             &rightHand_hr_mt RIGHT_GUI K  &rightHand_hr_mt RIGHT_CONTROL L  &rightHand_hr_mt RIGHT_ALT SEMICOLON  &kp SQT
&kp LEFT_SHIFT    &kp Z                       &kp X                    &kp C                       &kp V                  &kp B   &layer_mod LG(NUMBER_4)  &mo 5       &mo 4     &kp LGUI  &mo 5    &kp RSHFT  &kp N   &kp M             &kp COMMA                     &kp DOT                           &kp FSLH                              &kp RIGHT_SHIFT
&magic 2 0        &kp LALT                    &php_open_close          &kp LEFT_PARENTHESIS        &kp RIGHT_PARENTHESIS          &kp BACKSPACE            &kp LSHIFT  &kp LALT  &kp RALT  &kp RET  &kp SPACE          &kp LEFT_BRACKET  &kp RIGHT_BRACKET             &morph_sing_dbl_arrow             &none                                 &none
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 3
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        CmdLayer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &kp LC(LS(NUMBER_4))  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                        &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans        &trans         &trans                &trans                                                                               &trans            &trans            &trans  &trans     &trans
&trans  &trans        &trans         &trans                &trans            &kp HOME                                                   &trans  &trans            &trans            &trans  &trans     &trans
&trans  &kp LG(LEFT)  &kp LG(RIGHT)  &kp LS(LG(LBRC))      &kp LS(LG(RBRC))  &kp PG_UP                                                  &trans  &kp LS(RG(LBRC))  &kp LS(RG(RBRC))  &trans  &trans     &trans
&trans  &kp LEFT      &kp DOWN       &kp UP                &kp RIGHT         &kp PG_DN                                                  &trans  &kp LEFT          &kp DOWN          &kp UP  &kp RIGHT  &trans
&trans  &kp LG(LEFT)  &kp LG(RIGHT)  &kp LG(LEFT_BRACKET)  &kp LG(RBKT)      &kp END    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans            &trans  &trans     &trans
&trans  &trans        &trans         &trans                &trans                       &trans  &trans  &trans  &trans  &trans  &trans          &trans            &trans            &trans  &trans     &trans
            >;
        };
    };
};
